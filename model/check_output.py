import coptpy as cp
from coptpy import COPT
import tempfile, subprocess, os

def check_solution_align_with_problem(generated_problem, generated_solution):
    prompt = f"""Check if the provided #Solution correctly corresponds to the given #Problem. **The response should only be "There are no errors found." or "The #Solution is not aligned with #Problem."**\n\n#Problem:\n{generated_problem}\n\n#Solution:\n{generated_solution}"""
    return prompt
def check_generated_problem(generated_problem):
    example1_input = """Input:Below is an operations research question. Build a mathematical model and corresponding python code using coptpy that appropriately addresses the question.\n\n# Question:\nA university is planning the allocation of four types of classroom resources: Rooms X1, X2, X3, X4 for various courses, each with different capacities and costs. The goal is to minimize the total cost while meeting the educational needs effectively.\n\nThe allocation must adhere to the following constraints set due to scheduling and educational requirements:\n- The total capacity for Rooms X1 and X2 cannot exceed 500 students.\n- The total capacity for Rooms X2 and X3 must be at least 300 students.\n- The difference in capacity between Rooms X3 and X4 cannot exceed 100 students.\n- The difference in capacity between Rooms X4 and X1 must be at least 50 students.\n\nGiven that each room has specific limits on student capacity (X1: 0-500, X2: 0-400, X3: 0-600, X4: 0-700) due to size constraints, and since all values are integers as we can't have fractional numbers of students, what is the minimum total cost for the university's optimal resource allocation across these four types of rooms within the specified ranges? Please express the total cost in dollars, rounding to the nearest dollar.\n\n# Response:"""
    example1_output = """\nOutput:ERROR: The objective function is not clearly defined and missing parameter values for costs. The problem description mentions the goal of minimizing the total cost but does not provide specific information on how the total cost is calculated or what parameters are involved in the cost computation. Specifically, the problem description does not specify the cost associated with each room type (X1, X2, X3, X4). Without these values, the total cost cannot be computed."""
    example2_input ="""Input:Below is an operations research question. Build a mathematical model and corresponding python code using coptpy that appropriately addresses the question.\n\n# Question:\nAn electric scooter sharing service company is planning to allocate their scooters at four locations (A, B, C, and D) in a city. Each location has different demand and supply capacity for scooters. The objective is to minimize the allocation cost of scooters while meeting the minimum demand requirement at each location and not exceeding the maximum supply capacity.\n\nThe following are the demand and supply capacities related to these locations:\n- Location A has a minimum demand of 50 scooters and a maximum supply capacity of 300 scooters.\n- Location B has a minimum demand of 100 scooters and a maximum supply capacity of 200 scooters.\n- Location C has a minimum demand of 200 scooters and a maximum supply capacity of 500 scooters.\n- Location D has a minimum demand of 150 scooters and a maximum supply capacity of 400 scooters.\n\nThe allocation cost of scooters is directly proportional to the number of scooters allocated, with a cost of $10 per scooter.\n\nThe question is: How many scooters should be allocated at each location, while meeting the minimum demand requirement and not exceeding the maximum supply capacity at each location, in order to minimize the total cost? Solve this problem using operations research methods and provide the number of scooters allocated at each location and the corresponding total cost.\n\n# Response:"""
    example2_output = """\nOutput:There are no errors found. The objective is clearly defined as "minimize the total cost," and all the parameters have specified numerical values."""
    prompt = f""""# Task Description: Check the Completeness of Objective Function and Parameters in the Problem Description\n\n## Solution Description:\nTo ensure the problem description contains all necessary information for the objective function and that all parameters are specified with values, follow this structured approach:\n\n**Important: The checks must be based on the problem description and common sense. No assumptions or conjectures should be made. The conclusions must be justified by the problem description or common sense.**\n\n### Step 1: Extract Objective Function Information\n1. In the "# Question:" section, locate the description of the objective function.\n2. Confirm that the objective function is clearly defined, specifying what needs to be minimized or maximized.\n\n### Step 2: Extract Parameter Information\n1. Identify all parameters mentioned in the problem description.\n2. Ensure that all parameters have specified numerical values or clear definitions in the "# Question:" section.\n\n### Output Format:\n- If there are no errors, output: **"There are no errors found."**\n- If there are errors, output the specific errors with the format: **"ERROR: [description of error]"**. Specify whether it is due to a missing objective function or a missing parameter value.\n\nPlease check for any missing objective function information and undefined parameter values of **Input** based on the steps above. **Do not repeat the prompt, only provide the errors and their descriptions if any, or confirm there are no errors.**\n\n#Example 1:\n\n{example1_input}\n{example1_output}\n\n#Example 2:\n\n{example2_input}\n{example2_output}\n\n\n\n**Input**:{generated_problem}"""
    return prompt

def check_modeling_definitions(problem_with_completion):
    example1_input = """Input:...# Question:\nIn a hospital, it is necessary to allocate four different types of human resources (doctors, nurses, administrative staff, and cleaning staff) to three different departments (Emergency, Surgery, and Internal Medicine) within a week. The human resource requirements for each department, the supply of each type of human resource, and the efficiency indicators for allocating each type of human resource to each department are shown in the following table:\n\n| Department\\Human Resource | Doctors | Nurses | Administrative Staff | Cleaning Staff | Resource Requirement |\n|--------------------------|---------|--------|---------------------|----------------|---------------------|\n| Emergency                | 2       | 3      | 1                   | 4              | 50                  |\n| Surgery                  | 3       | 1      | 2                   | 2              | 60                  |\n| Internal Medicine        | 4       | 2      | 3                   | 1              | 40                  |\n\n| Resource Supply | Doctors | Nurses | Administrative Staff | Cleaning Staff |\n|-----------------|---------|--------|---------------------|----------------|\n| Supply          | 30      | 20     | 70                  | 30             |\n\nDesign a resource allocation plan to maximize the efficiency indicators.\n\nNote the following constraints:\n1. The hospital has limited human resources, and the supply of doctors, nurses, administrative staff, and cleaning staff needs to be considered.\n2. Different departments have different human resource requirements, and resource allocation needs to be based on actual needs.\n3. Due to the special nature of doctors, the allocation of doctors in the Emergency department should not exceed 15 units, in the Surgery department should not exceed 20 units, and in the Internal Medicine department should not exceed 25 units.\n4. Due to the special nature of the Emergency department, the allocation of nurses in the Emergency department must be at least 10 units.\n\nThe question is: Given the above constraints, how should the four types of human resources be allocated to maximize the total efficiency indicator?\n\n# Response:", "completion": "...### Decision Variables:\n- \\( x_{ij} \\): The quantity of human resource \\( j \\) allocated to department \\( i \\). Where \\( i \\) represents the department (Emergency, Surgery, Internal Medicine) and \\( j \\) represents the human resource type (Doctors, Nurses, Administrative Staff, Cleaning Staff).\n\n...### Non-negativity Constraints:\n- \\( x_{ij} \\geq 0 \\), for all \\( i, j \\).\n\n...# Add decision variables\nx = {(i, j): model.addVar(lb=0, vtype=COPT.CONTINUOUS, name=f'x_{i}_{j}') for i in departments for j in resources}\n...."""
    example1_output = """\nOutput:ERROR: Decision variables should be integer variables.\nFix: Change vtype=COPT.CONTINUOUS to vtype=COPT.INTEGER in the addVar function to reflect the integer nature of human resource allocation."""
    example2_input = """Input:...# Question:\nA retail company is designing a new customer loyalty program that includes three different rewards: x1, x2, and x3, which may involve discount coupons, point rewards, and free gifts, respectively. The goal is to minimize the total cost associated with these rewards, with costs of x1 being $10, x2 being $20, and x3 being $30.\n\nThe allocation must adhere to the following constraints set due to budget limitations:\n- The total number of rewards for x1 and x2 cannot exceed 1000.\n- The total number of rewards for x2 and x3 must be at least 500.\n- The difference in the number of rewards between x3 and x1 cannot exceed 200.\n\nConsidering that each reward has specific limits on the quantity (x1: 0-700, x2: 0-800, x3: 0-900) due to inventory restrictions or policies, and since all values are integers as we cannot have fractional quantities of rewards, what is the minimum total cost, rounded to the nearest dollar, for the optimal allocation of the three rewards within the specified ranges?\n\n# Response:", "completion": "...\n\n### Decision Variables:\n- \\(x_1\\): Quantity allocated to discount coupons.\n- \\(x_2\\): Quantity allocated to point rewards.\n- \\(x_3\\): Quantity allocated to free gifts.\n\n...### Integer Constraints:\n- \\(x_1, x_2, x_3\\) must be integers, as the quantity of rewards cannot be fractional.\n\n...# Add decision variables\nx1 = model.addVar(lb=0, ub=700, vtype=COPT.INTEGER, name="x1")  # Discount coupons\nx2 = model.addVar(lb=0, ub=800, vtype=COPT.INTEGER, name="x2")  # Point rewards\nx3 = model.addVar(lb=0, ub=900, vtype=COPT.INTEGER, name="x3")  # Free gifts\n\n...."""
    example2_output = """\nOutput:There are no errors found. Since x1,x2 and x3 represent quantities, they must be integers. Refer to ###Step 3."""

    prompt = f"""#Task Description: Check the Correctness of Decision Variable Definitions \n##Solution Description: To check the definitions of decision variables in a "## Mathematical Model:" for a combinatorial optimization problem, follow this structured approach:\n**Important: The checks must be based on the problem description and common sense. No assumptions or conjectures should be made. The conclusions must be justified by the problem description or common sense.**\n###Step 1: Extract Decision Variable Definitions\n1. In the "## Mathematical Model:" Find definitions under "### Decision Variables".\n2. In the "## Python Code Solution Using coptpy:" Identify definitions where "model.addVar" is used.\n###Step 2: Confirm Consistency with Problem Description\n1. Ensure each variable's type and bounds align with the problem's actual meaning.\n###Step 3: Confirm Variable Types and Bounds\nNote: The examples provided below are not exhaustive. Specific examples should be analyzed based on their actual meaning in the context of the problem. \n1. **Integer Variables (Bounds > 0): Examples of integer variables include the number of people (human resource), quantity(production quantity, the number of items produced, inventory quantity), event count, service count, product count, dose count, delivery count, number of vehicle trips, number of selections, number of machines, number of shifts, number of tasks, number of projects, number of batches, number of visits, number of orders, number of repairs, number of maintenance activities, number of inspections, number of tests, number of installations, number of calls, number of meetings, number of training sessions.**\n2. **Binary Variables (0 or 1): Examples of binary variables include attendance, binary choices, facility opening decisions, allocation decisions.**\n3. **Continuous Variables: Examples of continuous variables include length (like kilometre、metre、decimetre、centimetre、millimetre、micron, etc.), area (square meters, hectares, square kilometers, etc.), distance ( meter, kilometer, mile, centimeter, millimeter, micrometer, nanometer, inch, foot, yard, nautical mile, light-year.), time (second, minute, hour etc), amount of money,  weight (e.g., gram, kilogram, ton), volume (e.g., liter, cubic meter), temperature (e.g., degree Celsius, degree Fahrenheit), speed (e.g., meters per second, kilometers per hour), energy (e.g., joules, kilowatt-hours), power (e.g., watts, kilowatts), pressure (e.g., pascals, bar), flow rate (e.g., liters per second, cubic meters per hour), concentration (e.g., molarity, parts per million).**\n4. **Continuous Variables with Range: Examples of variables with range include proportions or percentages (0 to 1).**\n###Step 4: Check the Python Code Solution Using coptpy\n1. For integer variables: Ensure vtype=COPT.INTEGER.	\n2. For continuous variables: Ensure vtype=COPT.CONTINUOUS.\n3. For binary variables: Ensure vtype=COPT.BINARY. \n ### Output Format: \n**If there are no errors, output: "There are no errors found."\nIf there are errors, output the specific errors with the format "ERROR:" and how to fix them.**\nPlease check for any errors in the decision variable definitions based on the steps above. Make sure to especially reference the examples listed in '###Step 4'. Use #Examples as reference (Note that for ease of description, we will use the parts unrelated to decision variables as replace in #Examples). **Do not repeat the prompt, only provide the errors and fixes if any, or confirm there are no errors.**\n\n\n**Input**:\n{problem_with_completion}\n\n\n#Example1: \n{example1_input}\n{example1_output}\n\n\n#Example2: \n{example2_input}\n{example2_output}"""
    return prompt

    
def check_constraints(problem_with_completion):
    example1_input = """Input:...# Question:\nAn environmental company plans to handle and recycle waste at four locations (1, 2, 3, 4). The waste handling and recycling costs at each location are: $50/ton$ at location 1, $100/ton$ at location 2, $150/ton$ at location 3, and $200/ton$ at location 4.\n\nThe allocation must adhere to the following constraints:\n- The total waste handling and recycling quantity at locations 1 and 2 cannot exceed 500 tons.\n- The total waste handling and recycling quantity at locations 2 and 3 must be at least 300 tons.\n- The difference in waste handling and recycling quantity between locations 3 and 4 cannot exceed 100 tons.\n- The difference in waste handling and recycling quantity between locations 4 and 1 must be at least 50 tons.\n\nConsidering that each location has specific limits for waste handling and recycling (location 1: 0-500 tons, location 2: 0-400 tons, location 3: 0-600 tons, location 4: 0-700 tons) due to equipment or regulatory constraints, and since all values are integers because we cannot handle and recycle fractional waste, what is the minimum total cost in dollars for the optimal allocation of waste handling and recycling at the four locations within the specified ranges? Please round the answer to the nearest dollar.\n\n# Response:", "completion": "...### Decision Variables:\n- \\(x_1, x_2, x_3, x_4\\): Represent the quantity of waste handling and recycling at locations 1, 2, 3, and 4, respectively.\n\nThese variables represent the quantities needed to meet the waste handling and recycling demands at each location....\n\n### Constraints:\n1. The total waste handling and recycling quantity at locations 1 and 2 cannot exceed 500 tons: \\(x_1 + x_2 \\leq 500\\)\n2. The total waste handling and recycling quantity at locations 2 and 3 must be at least 300 tons: \\(x_2 + x_3 \\geq 300\\)\n3. The difference in waste handling and recycling quantity between locations 3 and 4 cannot exceed 100 tons: \\(-100 \\leq x_3 - x_4 \\leq 100\\)\n4. The difference in waste handling and recycling quantity between locations 4 and 1 must be at least 50 tons: \\(x_4 - x_1 \\geq 50\\)\n5. Each location has specific limits for waste handling and recycling:\n   - \\(0 \\leq x_1 \\leq 500\\)\n   - \\(0 \\leq x_2 \\leq 400\\)\n   - \\(0 \\leq x_3 \\leq 600\\)\n   - \\(0 \\leq x_4 \\leq 700\\)\n\n### Non-negativity and Integer Constraints:\n- \\(x_1, x_2, x_3, x_4 \\geq 0\\) and must be integers, as we cannot handle and recycle fractional waste....# Add variables\nx1 = model.addVar(lb=0, ub=500, vtype=COPT.INTEGER, name="x1")\nx2 = model.addVar(lb=0, ub=400, vtype=COPT.INTEGER, name="x2")\nx3 = model.addVar(lb=0, ub=600, vtype=COPT.INTEGER, name="x3")\nx4 = model.addVar(lb=0, ub=700, vtype=COPT.INTEGER, name="x4")\n\n# Add constraints\nmodel.addConstr(x1 + x2 <= 500, name="Site1And2Limit")\nmodel.addConstr(x2 + x3 >= 300, name="Site2And3Minimum")\nmodel.addConstr(x3 - x4 <= 100, name="Site3And4DifferenceUpperLimit")\nmodel.addConstr(x3 - x4 >= -100, name="Site3And4DifferenceLowerLimit")\nmodel.addConstr(x4 - x1 >= 50, name="Site4And1DifferenceMinimum")\n\n..."""
    example1_output = """\nOutput:ERROR: The constraint that "the difference in waste handling and recycling quantity between locations 4 and 1 must be at least 50 tons" is not correctly handled.\n Fix: There should be two constraints: x_4 - x_1 \geq 50 - M \cdot y and x_1 - x_4 \geq 50 - M \cdot (1 - y), where M is a sufficiently large number and y is the corresponding binary decision variable. Refer to ###Step 3."""
    example2_input = """Input:...# Question:\nA university is planning the allocation of four types of classroom resources: Rooms X1, X2, X3, X4 for various courses, each with different capacities and costs. The goal is to minimize the total cost while meeting the educational needs effectively.\n\nThe allocation must adhere to the following constraints set due to scheduling and educational requirements:\n- The total capacity for Rooms X1 and X2 cannot exceed 500 students.\n- The total capacity for Rooms X2 and X3 must be at least 300 students.\n- The difference in capacity between Rooms X3 and X4 cannot exceed 100 students.\n- The difference in capacity between Rooms X4 and X1 must be at least 50 students.\n\nGiven that each room has specific limits on student capacity (X1: 0-500, X2: 0-400, X3: 0-600, X4: 0-700) due to size constraints, and since all values are integers as we can't have fractional numbers of students, what is the minimum total cost for the university's optimal resource allocation across these four types of rooms within the specified ranges? Please express the total cost in dollars, rounding to the nearest dollar.\n\n# Response:","completion": "...### Decision Variables:\n- \\(x_1\\): The capacity of Room X1 (in number of students).\n- \\(x_2\\): The capacity of Room X2 (in number of students).\n- \\(x_3\\): The capacity of Room X3 (in number of students).\n- \\(x_4\\): The capacity of Room X4 (in number of students).\n\nThese variables represent the capacity of each room which is also the number of students that can be accommodated. \n\n...### Constraints:\n1. The total capacity of Rooms X1 and X2 cannot exceed 500 students: \\(x_1 + x_2 \\leq 500\\)\n2. The total capacity of Rooms X2 and X3 must be at least 300 students: \\(x_2 + x_3 \\geq 300\\)\n3. The difference in capacity between Rooms X3 and X4 cannot exceed 100 students: \\(\\lvert x_3 - x_4 \\rvert \\leq 100\\)\n4. The difference in capacity between Rooms X4 and X1 must be at least 50 students: \\(\\lvert x_4 - x_1 \\rvert \\geq 50\\)\n5. Specific limits on student capacity due to room size:\n   - \\(0 \\leq x_1 \\leq 500\\)\n   - \\(0 \\leq x_2 \\leq 400\\)\n   - \\(0 \\leq x_3 \\leq 600\\)\n   - \\(0 \\leq x_4 \\leq 700\\)\n\n### Integer Constraints:\n- \\(x_1, x_2, x_3, x_4\\) are integers, as room capacities are in whole numbers representing number of students.\n\n### Non-Negativity Constraints:\n- \\(x_1, x_2, x_3, x_4 \\geq 0\\), ensures all room capacities are non-negative.\n\nThe constraints involving absolute value can be linearized by introducing additional constraints. For example, constraint 5 can be decomposed into two inequalities:\n- \\(x_3 - x_4 \\leq 100\\)\n- \\(x_4 - x_3 \\leq 100\\)\n\nSimilarly, for constraint 6, two scenarios can be set, one as \\(x_4 \\geq x_1 + 50\\) and another as \\(x_1 \\geq x_4 + 50\\), and additional binary variables can be used to select the appropriate scenario.\n\n...# Define decision variables\nx1 = model.addVar(lb=0, ub=500, vtype=COPT.INTEGER, name="x1")\nx2 = model.addVar(lb=0, ub=400, vtype=COPT.INTEGER, name="x2")\nx3 = model.addVar(lb=0, ub=600, vtype=COPT.INTEGER, name="x3")\nx4 = model.addVar(lb=0, ub=700, vtype=COPT.INTEGER, name="x4")\n\n...# Add constraints\nmodel.addConstr(x1 + x2 <= 500, name="Constraint1")\nmodel.addConstr(x2 + x3 >= 300, name="Constraint2")\n\n# Linearize absolute value constraints |x3 - x4| <= 100\nmodel.addConstr(x3 - x4 <= 100, name="Constraint3a")\nmodel.addConstr(x4 - x3 <= 100, name="Constraint3b")\n\n# Linearize absolute value constraint |x4 - x1| >= 50\ny = model.addVar(vtype=COPT.BINARY, name="y")  # Binary variable\nM = 1000  # Large constant for Big M method\nmodel.addConstr(x4 - x1 >= 50 - M*(1-y), name="Constraint4a")\nmodel.addConstr(x1 - x4 >= 50 - M*y, name="Constraint4b")..."""
    example2_output = """\nOutput:There are no errors found. "Despite the lack of specifics in the "## Mathematical Model" section, the "Python script using the `coptpy` library" correctly models the two absolute value constraints mentioned in ### Step 3."""
    prompt = f""""# Task Description: Check the Correctness of Absolute Value and Binary Variable Constraints.\n## Solution Description: To check the correctness of absolute value and binary variable constraints in a "## Mathematical Model:" for a combinatorial optimization problem, follow this structured approach:\n**Important: The checks must be based on the problem description and common sense. No assumptions or conjectures should be made. The conclusions must be justified by the problem description or common sense.**\n\n### Step 1: Extract Decision Variable Definitions and Constraints Definitions\n1. In the "## Mathematical Model:" Find decision variable definitions under "### Decision Variables". Find constraints definitions under "### Constraints".\n2. In the "## Python Code Solution Using coptpy:" Identify decision variable definitions where "model.addVar" is used. Identify constraints where "model.addConstr" is used.\n\n### Step 2: Confirm Consistency with Problem Description\n1. Ensure each variable's type and bounds align with the problem's actual meaning.\n2. Ensure each constraint aligns with the problem's actual meaning.\n\n### Step 3: Check Absolute Value Constraints\n1. For constraints of the form |x_i - x_j| ≤ a (a ≥ 0), verify that they are split into two constraints:\n1) **x_i - x_j ≥ -a**;\n2) **x_i - x_j ≤ a**.\n2. For constraints of the form |x_i - x_j| ≥ a (a ≥ 0), verify the use of the Big-M method:\n1) Introduce a binary decision variable y for each constraint, and a sufficiently large constant M.\n2) Split into two constraints:\n(1) **x_i - x_j ≥ a - M * y**;\n(2) **x_j - x_i ≥ a - M * (1 - y)**.\n\n### Step 4: Special Constraints with Binary Variables\n**Examples of Different Scenarios:**\nThe examples provided below are not exhaustive. Specific examples should be analyzed based on their actual situation in the context of the problem.\n1. Facility Usage Constraints: x_i represents the usage amount of a facility, y_i represents whether to select the facility i.\n2. Transportation Mode Selection: x_i represents the amount of goods transported by a particular mode, y_i represents whether to select the transportation mode i.\n3. Course Selection: x_i represents the amount of time or credits dedicated to a course, y_i represents whether to select the course i.\n4. Investment Projects: x_i represents the investment amount in a project, y_i represents whether to select the project i.\n5. Resource Allocation: x_i represents the amount of a resource allocated to a task, y_i represents the allocation decision.\n6. Machine Scheduling: x_i represents the operating time of a machine, y_i represents the scheduling of the machine.\n7. Staff Assignment: x_i represents the working hours of a staff member, y_i represents the assignment of the staff member.\n#### Selection Constraints:\n1)At most K Selection Constraint (total types are N): For cases where the selection is limited to at most M types:\n**\\(\\sum_{{i=1}}^{{N}} y_i \\leq K\\); \\(x_i \\leq M \\cdot y_i\\)**;\n2)At least K Selection Constraint (total types are N): For cases where the selection is at least M types:\n**\\(\\sum_{{i=1}}^{{N}} y_i \\geq K\\); \\(x_i \\leq M \\cdot y_i\\)**; **\\(x_i \\geq \\epsilon \\cdot y_i\\)**.\nWhere M is a sufficiently large constant, and \\(\\epsilon\\) is a small constant.\n**Special example**: Sometimes, the \\(\\epsilon\\) should cater to the problem. For example, if there are 5 projects and at least 3 must be selected, with minimum investment amounts of 3000, 5000, 10000, 8000, and 7000 respectively, then \\(\\epsilon_1 = 3000\\) and follows. Thus **\\(x_1 \\leq 3000 \\cdot y_1\\)**, **\\(x_2 \\leq 5000 \\cdot y_2\\)**, **\\(x_3 \\leq 10000 \\cdot y_3\\)**, **\\(x_4 \\leq 8000 \\cdot y_4\\)**, **\\(x_5 \\leq 7000 \\cdot y_5\\)**.\n\n### Step 5: Confirm Consistency with Problem Description\n1. Ensure each constraint aligns with the problem's actual requirements and limitations.\n2. Ensure the Python code accurately reflects these constraints.\n\n### Output Format:\nIf there are no errors, output: "There are no errors found."\nIf there are errors, output the specific errors with the format "ERROR:" and how to fix them.\nPlease check for any errors in the constraints in **Input** based on the steps above. Make sure to especially reference the examples listed in Step 3. Use #Examples as reference (Note that for ease of description, we will use the parts unrelated to decision variables and constraints as replace in #Examples). **Do not repeat the prompt, only provide the errors and fixes if any, or confirm there are no errors.**\n\n**Input**:{problem_with_completion}\n\n\n### Example (for reference, not to be checked): \n# Example1:\n{example1_input}\n{example1_output}\n\n\n# Example2:\n{example2_input}\n{example2_output}"""
    return prompt

def check_python_code(example):
    code_field = None
    for key in example.keys():
        if "completion" in key:
            code_field = key
            break
    assert code_field is not None

    output = example[code_field]
    start = output.find("```python")
    if start == -1:
        run_out = f"Execution Failed: No ```python found in example"
        example['run_script'] = run_out
        return example, run_out
    end = output.find("```", start + 9)
    if end == -1:
        run_out = f"Execution Failed: No ``` found in example"
        example['run_script'] = run_out
        return example, run_out
        
    script = output[start:end].replace("```python", "").strip()
    if script == "":
        run_out = f"Execution Failed: Empty code in example"
        example['run_script'] = run_out
        return example, run_out
    # Save script to a temporary file and execute
    with tempfile.NamedTemporaryFile(delete=False, suffix='.py') as tmp_file:
        tmp_file.write(script.encode())
        tmp_file_name = tmp_file.name

    try:
        process = subprocess.run(['python', tmp_file_name], text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=15)
        if process.returncode != 0:
            run_out = f"Execution Failed with Error:\n{process.stderr}"
        else:
            run_out = f"Execution succeeded:\n{process.stdout}"
        # run_out = f"Execution result for example:\n{process.stdout}"
    except subprocess.TimeoutExpired:
        run_out = f"Execution Failed: Timeout for example"
    except Exception as e:
        run_out = f"Execution Failed: Unexpected error occurred - {str(e)}"
    

    finally:
        
        os.remove(tmp_file_name)
    example['run_script'] = run_out
    return example, run_out
